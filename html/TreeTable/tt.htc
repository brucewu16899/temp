<PUBLIC:COMPONENT>

<PUBLIC:PROPERTY NAME="tt_roothandle" />
<PUBLIC:PROPERTY NAME="tt_persist" />
<PUBLIC:PROPERTY NAME="tt_respath" />
<PUBLIC:PROPERTY NAME="tt_imge" />
<PUBLIC:PROPERTY NAME="tt_imgc" />
<PUBLIC:PROPERTY NAME="tt_imgd" />

<PUBLIC:ATTACH EVENT="onload" ONEVENT="doInit()" FOR="window" />
<PUBLIC:ATTACH EVENT="onclick" ONEVENT="doToggle()" />

<SCRIPT LANGUAGE="JScript">

var bRootHandle = false;
var bPersist = false;
var strResPath = "./";
var strImgExpand = "tree_exp.gif";
var strImgCollapse = "tree_col.gif";
var strImgDoc = "tree_doc.gif";

// 生成一个唯一的顺序号
function getSequence() {
    if (typeof(element._TTSEQ) == "undefined") {
        element._TTSEQ = 0;
    }
    element._TTSEQ ++;
    return element._TTSEQ;
}

// 获得 tree table status cookie
function getTTSCookie() {
    var name = "_TTSC";
    if (element.id != null) name += element.id;

    var arg = name + "=";
    var alen = arg.length;
    var clen = element.document.cookie.length;
    var i = 0;

    while (i < clen) {
        var j = i + alen;
        if (element.document.cookie.substring(i, j) == arg) {
            var endstr = element.document.cookie.indexOf (";", j);
            if (endstr == -1)
                endstr = element.document.cookie.length;
            return unescape(element.document.cookie.substring(j, endstr));
        }
        i = element.document.cookie.indexOf(" ", i) + 1;
        if (i == 0) break;
    }
    return null;
}

// 设置 tree table status cookie
function setTTSCookie(value) {
    var name = "_TTSC";
    if (element.id != null) name += element.id;

    element.document.cookie = name + "=" + escape (value);
}

// 把一个 tree node 的状态保存到 cookie 中
function persistentTNS(el) {
    if (!bPersist) return;
    if (el.className != "treenode") return;
    var key = el.id;
    var val = el.bExpanded ? "E" : "C";
    var cv = getTTSCookie();
    if (cv == null) {
        cv = key + "|" + val;
    } else {
        var kvArray = cv.split("/");
        var i = 0;
        for (i=0; i<kvArray.length; i++) {
            var kvPair = kvArray[i].split("|");
            if (key == kvPair[0]) {
                kvArray[i] = key + "|" + val;
                cv = kvArray.join("/");
                break;
            }
        }
        if (i >= kvArray.length) {
            cv += "/" + key + "|" + val;
        }
    }
    setTTSCookie(cv);
}

// 恢复一个 tree node 的状态
function restoreTNS(el) {
    if (!bPersist) return;
    if (el.className != "treenode") return;
    var key = el.id;

    var cv = getTTSCookie();
    if (cv == null) return null;

    var kvArray = cv.split("/");
    for (var i=0; i<kvArray.length; i++) {
        var kvPair = kvArray[i].split("|");
        if (key == kvPair[0]) {
            el.bExpanded = kvPair[1] == "E";
            return;
        }
    }
}

// 获取指定元素外围的特定类型的元素
function getAncestorOfClass(from, clz) {
    while (from != null) {
        if (from.className == clz) return from;
        from = from.parentNode;
    }
    return null;
}

// 设置一个 TR 的显示状态
// 一个 TR，只有其上游所有 treenode 都处于 Expanded 状态，它才能被显示
function setRowDisplay(el) {
    var tmpDisp = "";
    var tmpTR = el.parentBranch;
    while (tmpTR != null) {
        if (!tmpTR.bExpanded) {
            tmpDisp = "none";
            break;
        }
        tmpTR = tmpTR.parentBranch;
    }
    el.style.display = tmpDisp;
    el.firstChild.style.textAlign = "left";
    if (el.parentBranch != null)
        el.firstChild.style.paddingLeft = 0;
}

// 为一个 TR 计算其由特定“分支”造成的前缀图片
function getPaddingImage(baseName, elMe, elAncestor) {
    var strImgName = baseName;
    if (elMe.rowIndex <= (elAncestor.rowIndex + elAncestor.nBodyRows)) strImgName += "u";
    if (elMe.parentBranch == elAncestor) strImgName += "r";
    if (elMe.rowIndex < (elAncestor.rowIndex + elAncestor.nBodyRows)) strImgName += "d";
    strImgName += ".gif";
    return strImgName;
}

// 为一个“分支”型 TR 计算全部的前缀
function getBranchPrefix(el, bExpanded) {
    if (typeof(el.parentBranch) != "object") return "";

    // 对于树根，返回一个特殊的 handle image
    if (el.parentBranch == null) {
        if (!bRootHandle) return "";
        return "<img class='tnhandle' id='" + el.id + "_h' src='" + strResPath + (bExpanded ? "tree_mr.gif" : "tree_pr.gif") + "'>";
    }

    var strPrefix = "<img class='tnhandle' id='" + el.id + "_h' src='" + strResPath + (bExpanded ? "tree_murd.gif" : "tree_purd.gif") + "'>";
    var elParent = el.parentBranch;
    while (elParent.parentBranch != null) {
        elParent = elParent.parentBranch;
        strPrefix = "<img class='tnpadding' src='" + strResPath + getPaddingImage("tree_l", el, elParent) + "'>" + strPrefix;
    }
    if (bRootHandle) strPrefix = "<img class='tnpadding' src='" + strResPath + "tree_l.gif'>" + strPrefix;
    return strPrefix;
}

// 为一个“叶子”型 TR 计算全部的前缀
function getLeafPrefix(el) {
    var strPrefix = "<img class='tnpadding' src='" + strResPath + getPaddingImage("tree_l", el, el.parentBranch) + "'>";
    var elParent = el.parentBranch;
    while (elParent.parentBranch != null) {
        elParent = elParent.parentBranch;
        strPrefix = "<img class='tnpadding' src='" + strResPath + getPaddingImage("tree_l", el, elParent) + "'>" + strPrefix;
    }
    if (bRootHandle) strPrefix = "<img class='tnpadding' src='" + strResPath + "tree_l.gif'>" + strPrefix;
    return strPrefix;
}

// 初始化一个“分支”型的 TR
function initBranch(parentBranch, ptr, level) {
    var elTR = element.rows(ptr);

    var strId = "_TT" + getSequence();
    var strId_f = strId + "_f";  // tnfolder
    var strId_h = strId + "_h";  // tnhandle

    // 将该分支与上级分支挂接起来
    elTR.parentBranch = parentBranch;
    elTR.nLevel = level;
    elTR.id = strId;

    // 确保该分支有可用的 tt_bodyrows 定义
    if (elTR.tt_bodyrows == null) {
        if (typeof(element._TTALARMED) == "undefined") {
            element._TTALARMED = true;
            alert("'treenode' 元素必需指定 'tt_bodyrows' 值。");
            return;
        }
    }
    elTR.nBodyRows = parseInt(elTR.tt_bodyrows);

    // 设定该分支的内部属性
    elTR.strExpand   = getBranchPrefix(elTR, true) + "<img class='tnfolder' id='" + strId_f + "' src='" + strImgExpand + "'> " + elTR.firstChild.innerHTML;
    elTR.strCollapse = getBranchPrefix(elTR, false) + "<img class='tnfolder' id='" + strId_f + "' src='" + strImgCollapse + "'> " + elTR.firstChild.innerHTML;

    // 如果该分支有 tt_init 的定义，则进行 Expanded 状态设定
    elTR.bExpanded = false;
    if (elTR.tt_init == "expand") elTR.bExpanded = true;

    // 从 cookie 中恢复 Expanded 状态
    restoreTNS(elTR);

    // 设定该分支的内容
    elTR.firstChild.innerHTML = elTR.bExpanded ? elTR.strExpand : elTR.strCollapse;
    setRowDisplay(elTR);

    // 遍历处理“辖区”内的 TR
    for (var i=ptr+1; i <= ptr+elTR.nBodyRows; i++) {
        if (element.rows(i).className == "treenode") {
            i += initBranch(elTR, i, level+1);
        } else {
            initLeaf(elTR, i);
        }
    }

    return elTR.nBodyRows;
}

// 初始化一个“叶子”型的 TR
function initLeaf(parentBranch, ptr) {
    var elTR = element.rows(ptr);

    // 将该叶子与上级分支挂接起来
    elTR.parentBranch = parentBranch;

    elTR.firstChild.innerHTML = getLeafPrefix(elTR) + "<img class='tnpadding' src='" + strImgDoc + "'> " + elTR.firstChild.innerHTML;

    setRowDisplay(elTR);
}

// 初始化整个 treetable
function doInit() {
    // 初始化参数
    if (typeof(element.tt_roothandle) != "undefined") bRootHandle = (element.tt_roothandle == "yes");
    if (typeof(element.tt_persist) != "undefined") bPersist = (element.tt_persist == "yes");

    if (element.tt_respath != null) {
        strResPath = element.tt_respath;
        if (strResPath == "") {
            strResPath = "./";
        } else {
            var c = strResPath.charAt(strResPath.length - 1);
            if (c != "/" && c != "\\") strResPath += "/";
        }
    }

    if (element.tt_imge != null) strImgExpand = element.tt_imge;
    if (element.tt_imgc != null) strImgCollapse = element.tt_imgc;
    if (element.tt_imgd != null) strImgDoc = element.tt_imgd;

    // 遍历内部的每个 TR
    for (var i=0; i < element.rows.length; i++) {
        if (element.rows(i).className == "treenode") {
            i += initBranch(null, i, 0);
        }
    }
}

// 负责处理 tree node handle 的点击事件
function doToggle() {
    // tnfolder 点击时只负责展开节点
    if (event.srcElement.className == "tnfolder") {
        var elTR = getAncestorOfClass(event.srcElement, "treenode");
        if (elTR != null) {
            elTR.bExpanded = true;
            persistentTNS(elTR);

            // 设定该分支的内容
            elTR.firstChild.innerHTML = elTR.strExpand;

            // 遍历处理“辖区”内的 TR
            var n = elTR.nBodyRows;
            for (var i=0; i < n; i++) {
                elTR = elTR.nextSibling;
                setRowDisplay(elTR);
            }
        }
    }

    // tnhandle 点击时将在展开/折叠之间反复
    if (event.srcElement.className == "tnhandle") {
        var elTR = getAncestorOfClass(event.srcElement, "treenode");
        if (elTR != null) {
            elTR.bExpanded = !elTR.bExpanded;
            persistentTNS(elTR);

            // 设定该分支的内容
            elTR.firstChild.innerHTML = elTR.bExpanded ? elTR.strExpand : elTR.strCollapse;

            // 遍历处理“辖区”内的 TR
            var n = elTR.nBodyRows;
            for (var i=0; i < n; i++) {
                elTR = elTR.nextSibling;
                setRowDisplay(elTR);
            }
        }
    }
}
</SCRIPT>
<PUBLIC:COMPONENT>
